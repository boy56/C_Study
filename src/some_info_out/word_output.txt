1 constsy const
2 intsy int
3 ident cst1
4 assign  
5 intcon 1
6 comma ,
7 ident cst2
8 assign  
9 intcon 2
10 comma ,
11 ident cst3
12 assign  
13 intcon 3
14 semicolon ;
15 constsy const
16 charsy char
17 ident csta
18 assign  
19 charcon a
20 comma ,
21 ident cstb
22 assign  
23 charcon b
24 comma ,
25 ident cstc
26 assign  
27 charcon c
28 semicolon ;
29 intsy int
30 ident g_a
31 comma ,
32 ident g_b
33 comma ,
34 ident g_arr
35 lsbrack [
36 intcon 2048
37 rsbrack ]
38 semicolon ;
39 charsy char
40 ident g_stra
41 lsbrack [
42 intcon 1024
43 rsbrack ]
44 comma ,
45 ident g_strb
46 lsbrack [
47 intcon 2048
48 rsbrack ]
49 semicolon ;
50 voidsy void
51 ident const_define
52 lparent (
53 rparent )
54 lcbrack {
55 constsy const
56 intsy int
57 ident a
58 assign  
59 intcon 1
60 semicolon ;
61 constsy const
62 intsy int
63 ident b
64 assign  
65 intcon 0
66 comma ,
67 ident c
68 assign  
69 minus -
70 intcon 1
71 semicolon ;
72 constsy const
73 charsy char
74 ident cst23
75 assign '
76 charcon x
77 semicolon ;
78 constsy const
79 charsy char
80 ident cst24
81 assign '
82 charcon z
83 comma ,
84 ident consta0
85 assign '
86 charcon A
87 comma ,
88 ident csta1
89 assign '
90 charcon 1
91 comma ,
92 ident cst_div
93 assign  
94 charcon /
95 semicolon ;
96 printfsy printf
97 lparent (
98 ident a
99 rparent )
100 semicolon ;
101 printfsy printf
102 lparent (
103 ident cst_div
104 rparent )
105 semicolon ;
106 rcbrack }
107 voidsy void
108 ident const_define_test
109 lparent (
110 rparent )
111 lcbrack {
112 ident const_define
113 lparent (
114 rparent )
115 semicolon ;
116 rcbrack }
117 voidsy void
118 ident var_define
119 lparent (
120 rparent )
121 lcbrack {
122 intsy int
123 ident a
124 comma ,
125 ident arr
126 lsbrack [
127 intcon 1
128 rsbrack ]
129 comma ,
130 ident _a
131 comma ,
132 ident _arr
133 lsbrack [
134 intcon 2
135 rsbrack ]
136 comma ,
137 ident a1
138 comma ,
139 ident arr1
140 lsbrack [
141 intcon 3
142 rsbrack ]
143 semicolon ;
144 charsy char
145 ident b
146 comma ,
147 ident strb
148 lsbrack [
149 intcon 1
150 rsbrack ]
151 comma ,
152 ident _b
153 comma ,
154 ident _bstr
155 lsbrack [
156 intcon 2
157 rsbrack ]
158 comma ,
159 ident _b1
160 comma ,
161 ident _bstr1
162 lsbrack [
163 intcon 3
164 rsbrack ]
165 semicolon ;
166 intsy int
167 ident c
168 semicolon ;
169 charsy char
170 ident z
171 semicolon ;
172 rcbrack }
173 voidsy void
174 ident var_define_test
175 lparent (
176 rparent )
177 lcbrack {
178 ident var_define
179 lparent (
180 rparent )
181 semicolon ;
182 rcbrack }
183 voidsy void
184 ident define
185 lparent (
186 rparent )
187 lcbrack {
188 constsy const
189 intsy int
190 ident int1
191 assign  
192 intcon 1
193 semicolon ;
194 constsy const
195 charsy char
196 ident cst24
197 assign '
198 charcon z
199 comma ,
200 ident consta0
201 assign '
202 charcon A
203 semicolon ;
204 intsy int
205 ident val1
206 semicolon ;
207 charsy char
208 ident b
209 comma ,
210 ident strb
211 lsbrack [
212 intcon 1
213 rsbrack ]
214 semicolon ;
215 rcbrack }
216 voidsy void
217 ident define_test
218 lparent (
219 rparent )
220 lcbrack {
221 ident var_define_test
222 lparent (
223 rparent )
224 semicolon ;
225 ident const_define_test
226 lparent (
227 rparent )
228 semicolon ;
229 ident define
230 lparent (
231 rparent )
232 semicolon ;
233 printfsy printf
234 lparent (
235 stringcon define test passed
236 rparent )
237 semicolon ;
238 rcbrack }
239 voidsy void
240 ident operator
241 lparent (
242 rparent )
243 lcbrack {
244 intsy int
245 ident a
246 comma ,
247 ident b
248 comma ,
249 ident c
250 comma ,
251 ident d
252 comma ,
253 ident e
254 comma ,
255 ident f
256 semicolon ;
257 ident a
258 assign  
259 intcon 1
260 semicolon ;
261 ident b
262 assign  
263 intcon 1
264 plus +
265 intcon 2
266 semicolon ;
267 ident c
268 assign  
269 intcon 3
270 mult *
271 intcon 1
272 semicolon ;
273 ident d
274 assign  
275 minus -
276 intcon 4
277 semicolon ;
278 ident e
279 assign  
280 intcon 5
281 semicolon ;
282 ident f
283 assign  
284 intcon 6
285 semicolon ;
286 ident a
287 assign  
288 lparent (
289 ident b
290 mult *
291 intcon 3
292 rparent )
293 plus +
294 ident c
295 minus -
296 ident d
297 rdiv /
298 intcon 4
299 plus +
300 ident a
301 rdiv /
302 ident a
303 semicolon ;
304 ident b
305 assign  
306 plus +
307 intcon 0
308 plus +
309 ident a
310 plus +
311 lparent (
312 ident a
313 mult *
314 intcon 3
315 rparent )
316 plus +
317 ident c
318 minus -
319 ident d
320 rdiv /
321 intcon 4
322 plus +
323 ident e
324 mult *
325 ident f
326 semicolon ;
327 ident e
328 assign  
329 minus -
330 lparent (
331 ident a
332 rparent )
333 plus +
334 ident b
335 mult *
336 intcon 0
337 minus -
338 lparent (
339 intcon 1
340 minus -
341 intcon 0
342 rparent )
343 semicolon ;
344 rcbrack }
345 voidsy void
346 ident operator_test
347 lparent (
348 rparent )
349 lcbrack {
350 ident operator
351 lparent (
352 rparent )
353 semicolon ;
354 printfsy printf
355 lparent (
356 stringcon operator test passed
357 rparent )
358 semicolon ;
359 rcbrack }
360 voidsy void
361 ident string
362 lparent (
363 rparent )
364 lcbrack {
365 printfsy printf
366 lparent (
367 stringcon ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz
368 rparent )
369 semicolon ;
370 printfsy printf
371 lparent (
372 stringcon !#$%&'()*+,-./:;<=>?@[]^_`{|}~
373 rparent )
374 semicolon ;
375 rcbrack }
376 voidsy void
377 ident string_test
378 lparent (
379 rparent )
380 lcbrack {
381 ident string
382 lparent (
383 rparent )
384 semicolon ;
385 rcbrack }
386 voidsy void
387 ident dowhile
388 lparent (
389 rparent )
390 lcbrack {
391 intsy int
392 ident i
393 semicolon ;
394 ident i
395 assign  
396 intcon 100
397 semicolon ;
398 dosy do
399 lcbrack {
400 ifsy if
401 lparent (
402 ident i
403 geq >=
404 intcon 50
405 rparent )
406 ident i
407 assign  
408 ident i
409 rdiv /
410 intcon 2
411 semicolon ;
412 ifsy if
413 lparent (
414 ident i
415 lss <
416 intcon 50
417 rparent )
418 ident i
419 assign  
420 lparent (
421 ident i
422 plus +
423 intcon 10
424 rparent )
425 rdiv /
426 intcon 10
427 semicolon ;
428 rcbrack }
429 whilesy while
430 lparent (
431 ident i
432 geq >=
433 intcon 10
434 rparent )
435 semicolon ;
436 dosy do
437 lcbrack {
438 ident i
439 assign  
440 ident i
441 minus -
442 intcon 1
443 semicolon ;
444 printfsy printf
445 lparent (
446 stringcon dowhile test passed
447 rparent )
448 semicolon ;
449 rcbrack }
450 whilesy while
451 lparent (
452 intcon 0
453 rparent )
454 rcbrack }
455 voidsy void
456 ident dowhile_test
457 lparent (
458 rparent )
459 lcbrack {
460 ident dowhile
461 lparent (
462 rparent )
463 semicolon ;
464 rcbrack }
465 voidsy void
466 ident ifcondition
467 lparent (
468 rparent )
469 lcbrack {
470 intsy int
471 ident a
472 comma ,
473 ident rightnumber
474 semicolon ;
475 ident a
476 assign  
477 intcon 1
478 semicolon ;
479 ident rightnumber
480 assign  
481 intcon 0
482 semicolon ;
483 ifsy if
484 lparent (
485 ident a
486 eql ==
487 intcon 1
488 rparent )
489 ident rightnumber
490 assign  
491 ident rightnumber
492 plus +
493 intcon 1
494 semicolon ;
495 ident a
496 assign  
497 intcon 2
498 semicolon ;
499 ifsy if
500 lparent (
501 ident a
502 gtr >
503 intcon 1
504 rparent )
505 ident rightnumber
506 assign  
507 ident rightnumber
508 plus +
509 intcon 1
510 semicolon ;
511 ident a
512 assign  
513 intcon 0
514 semicolon ;
515 ifsy if
516 lparent (
517 ident a
518 lss <
519 intcon 1
520 rparent )
521 ident rightnumber
522 assign  
523 ident rightnumber
524 plus +
525 intcon 1
526 semicolon ;
527 ifsy if
528 lparent (
529 ident a
530 neq !=
531 intcon 1
532 rparent )
533 ident rightnumber
534 assign  
535 ident rightnumber
536 plus +
537 intcon 1
538 semicolon ;
539 ifsy if
540 lparent (
541 ident a
542 geq >=
543 intcon 0
544 rparent )
545 ident rightnumber
546 assign  
547 ident rightnumber
548 plus +
549 intcon 1
550 semicolon ;
551 ifsy if
552 lparent (
553 ident a
554 leq <=
555 intcon 0
556 rparent )
557 ident rightnumber
558 assign  
559 ident rightnumber
560 plus +
561 intcon 1
562 semicolon ;
563 ifsy if
564 lparent (
565 ident rightnumber
566 neq !=
567 lparent (
568 intcon 1
569 plus +
570 intcon 1
571 plus +
572 intcon 1
573 plus +
574 intcon 1
575 mult *
576 intcon 3
577 rparent )
578 rparent )
579 printfsy printf
580 lparent (
581 stringcon ifcondition clause error!
582 rparent )
583 semicolon ;
584 ifsy if
585 lparent (
586 ident rightnumber
587 neq !=
588 ident rightnumber
589 rparent )
590 printfsy printf
591 lparent (
592 stringcon ifcondition clause error
593 rparent )
594 semicolon ;
595 rcbrack }
596 intsy int
597 ident switchcodintionans
598 lparent (
599 intsy int
600 ident x
601 rparent )
602 lcbrack {
603 switchsy switch
604 lparent (
605 ident x
606 rparent )
607 lcbrack {
608 casesy case
609 intcon 1
610 colon :
611 returnsy return
612 lparent (
613 intcon 2
614 rparent )
615 semicolon ;
616 casesy case
617 intcon 2
618 colon :
619 returnsy return
620 lparent (
621 intcon 3
622 rparent )
623 semicolon ;
624 casesy case
625 intcon 3
626 colon :
627 returnsy return
628 lparent (
629 intcon 4
630 rparent )
631 semicolon ;
632 rcbrack }
633 returnsy return
634 lparent (
635 intcon 5
636 rparent )
637 semicolon ;
638 rcbrack }
639 intsy int
640 ident switchcodintion
641 lparent (
642 rparent )
643 lcbrack {
644 intsy int
645 ident i
646 comma ,
647 ident rightnumber
648 semicolon ;
649 ident i
650 assign  
651 intcon 1
652 semicolon ;
653 ident rightnumber
654 assign  
655 intcon 0
656 semicolon ;
657 dosy do
658 lcbrack {
659 ifsy if
660 lparent (
661 ident i
662 plus +
663 intcon 1
664 eql ==
665 ident switchcodintionans
666 lparent (
667 ident i
668 rparent )
669 rparent )
670 ident rightnumber
671 assign  
672 ident rightnumber
673 plus +
674 intcon 1
675 semicolon ;
676 ident i
677 assign  
678 ident i
679 plus +
680 intcon 1
681 semicolon ;
682 rcbrack }
683 whilesy while
684 lparent (
685 ident i
686 lss <
687 intcon 5
688 rparent )
689 semicolon ;
690 ifsy if
691 lparent (
692 ident rightnumber
693 neq !=
694 intcon 4
695 rparent )
696 printfsy printf
697 lparent (
698 stringcon switchcodintion clause  error!
699 rparent )
700 semicolon ;
701 ifsy if
702 lparent (
703 ident rightnumber
704 rparent )
705 returnsy return
706 lparent (
707 ident i
708 rparent )
709 semicolon ;
710 printfsy printf
711 lparent (
712 stringcon switchcodintion clause  error!
713 rparent )
714 semicolon ;
715 rcbrack }
716 voidsy void
717 ident condition
718 lparent (
719 rparent )
720 lcbrack {
721 constsy const
722 intsy int
723 ident intermax
724 assign  
725 intcon 5
726 semicolon ;
727 intsy int
728 ident iter
729 semicolon ;
730 ident iter
731 assign  
732 intcon 0
733 semicolon ;
734 dosy do
735 lcbrack {
736 switchsy switch
737 lparent (
738 ident iter
739 rparent )
740 lcbrack {
741 casesy case
742 intcon 0
743 colon :
744 ifsy if
745 lparent (
746 ident iter
747 neq !=
748 intcon 0
749 rparent )
750 printfsy printf
751 lparent (
752 stringcon error 0
753 rparent )
754 semicolon ;
755 casesy case
756 intcon 1
757 colon :
758 ifsy if
759 lparent (
760 ident iter
761 neq !=
762 intcon 1
763 rparent )
764 printfsy printf
765 lparent (
766 stringcon error 1
767 rparent )
768 semicolon ;
769 casesy case
770 intcon 2
771 colon :
772 ifsy if
773 lparent (
774 ident iter
775 neq !=
776 intcon 2
777 rparent )
778 printfsy printf
779 lparent (
780 stringcon error 2
781 rparent )
782 semicolon ;
783 rcbrack }
784 ident iter
785 assign  
786 ident iter
787 plus +
788 intcon 1
789 semicolon ;
790 rcbrack }
791 whilesy while
792 lparent (
793 ident iter
794 lss <
795 ident intermax
796 rparent )
797 semicolon ;
798 rcbrack }
799 voidsy void
800 ident condition_test
801 lparent (
802 rparent )
803 lcbrack {
804 ident ifcondition
805 lparent (
806 rparent )
807 semicolon ;
808 ident switchcodintion
809 lparent (
810 rparent )
811 semicolon ;
812 ident condition
813 lparent (
814 rparent )
815 semicolon ;
816 printfsy printf
817 lparent (
818 stringcon condition test passed
819 rparent )
820 semicolon ;
821 rcbrack }
822 voidsy void
823 ident miscellaneous
824 lparent (
825 rparent )
826 lcbrack {
827 intsy int
828 ident _
829 comma ,
830 ident a
831 comma ,
832 ident array
833 lsbrack [
834 intcon 23
835 rsbrack ]
836 comma ,
837 ident i
838 comma ,
839 ident endid
840 semicolon ;
841 charsy char
842 ident ch1
843 comma ,
844 ident buf
845 lsbrack [
846 intcon 256
847 rsbrack ]
848 semicolon ;
849 ident _
850 assign  
851 intcon 1
852 semicolon ;
853 ident a
854 assign  
855 intcon 2
856 semicolon ;
857 dosy do
858 lcbrack {
859 ident array
860 lsbrack [
861 ident i
862 rsbrack ]
863 assign  
864 ident i
865 semicolon ;
866 ident i
867 assign  
868 ident i
869 plus +
870 intcon 1
871 semicolon ;
872 rcbrack }
873 whilesy while
874 lparent (
875 ident i
876 lss <
877 intcon 23
878 rparent )
879 semicolon ;
880 ident ch1
881 assign  
882 charcon a
883 semicolon ;
884 ident i
885 assign  
886 intcon 127
887 semicolon ;
888 ident endid
889 assign  
890 ident i
891 semicolon ;
892 ident _
893 assign  
894 intcon 0
895 semicolon ;
896 dosy do
897 lcbrack {
898 ident buf
899 lsbrack [
900 lparent (
901 ident _
902 mult *
903 intcon 1
904 minus -
905 ident _
906 minus -
907 intcon 1
908 plus +
909 intcon 2
910 rdiv /
911 intcon 1
912 minus -
913 intcon 1
914 rparent )
915 rdiv /
916 intcon 2
917 rsbrack ]
918 assign  
919 charcon a
920 semicolon ;
921 ident _
922 assign  
923 ident _
924 plus +
925 intcon 1
926 semicolon ;
927 rcbrack }
928 whilesy while
929 lparent (
930 ident _
931 lss <
932 ident endid
933 rparent )
934 semicolon ;
935 semicolon ;
936 semicolon ;
937 semicolon ;
938 semicolon ;
939 semicolon ;
940 semicolon ;
941 semicolon ;
942 semicolon ;
943 semicolon ;
944 lcbrack {
945 rcbrack }
946 lcbrack {
947 rcbrack }
948 semicolon ;
949 semicolon ;
950 semicolon ;
951 semicolon ;
952 semicolon ;
953 lcbrack {
954 rcbrack }
955 lcbrack {
956 rcbrack }
957 lcbrack {
958 semicolon ;
959 semicolon ;
960 semicolon ;
961 semicolon ;
962 semicolon ;
963 semicolon ;
964 rcbrack }
965 semicolon ;
966 semicolon ;
967 semicolon ;
968 ifsy if
969 lparent (
970 ident buf
971 lsbrack [
972 intcon 0
973 rsbrack ]
974 eql ==
975 charcon a
976 rparent )
977 printfsy printf
978 lparent (
979 stringcon miscellaneous test passed
980 rparent )
981 semicolon ;
982 rcbrack }
983 voidsy void
984 ident miscellaneous_test
985 lparent (
986 rparent )
987 lcbrack {
988 ident miscellaneous
989 lparent (
990 rparent )
991 semicolon ;
992 rcbrack }
993 intsy int
994 ident fibonaci
995 lparent (
996 intsy int
997 ident n
998 rparent )
999 lcbrack {
1000 switchsy switch
1001 lparent (
1002 ident n
1003 rparent )
1004 lcbrack {
1005 casesy case
1006 intcon 0
1007 colon :
1008 returnsy return
1009 lparent (
1010 intcon 0
1011 rparent )
1012 semicolon ;
1013 casesy case
1014 intcon 1
1015 colon :
1016 returnsy return
1017 lparent (
1018 intcon 1
1019 rparent )
1020 semicolon ;
1021 casesy case
1022 intcon 2
1023 colon :
1024 returnsy return
1025 lparent (
1026 intcon 1
1027 rparent )
1028 semicolon ;
1029 rcbrack }
1030 returnsy return
1031 lparent (
1032 ident fibonaci
1033 lparent (
1034 ident n
1035 minus -
1036 intcon 1
1037 rparent )
1038 plus +
1039 ident fibonaci
1040 lparent (
1041 ident n
1042 minus -
1043 intcon 2
1044 rparent )
1045 rparent )
1046 semicolon ;
1047 rcbrack }
1048 voidsy void
1049 ident fibonaci_test
1050 lparent (
1051 rparent )
1052 lcbrack {
1053 intsy int
1054 ident n
1055 semicolon ;
1056 printfsy printf
1057 lparent (
1058 stringcon Fibonaci: Please input a unsigned positive integer ?
1059 rparent )
1060 semicolon ;
1061 scanfsy scanf
1062 lparent (
1063 ident n
1064 rparent )
1065 semicolon ;
1066 dosy do
1067 lcbrack {
1068 ifsy if
1069 lparent (
1070 ident n
1071 lss <
1072 intcon 0
1073 rparent )
1074 lcbrack {
1075 printfsy printf
1076 lparent (
1077 stringcon Input error, try again:
1078 rparent )
1079 semicolon ;
1080 scanfsy scanf
1081 lparent (
1082 ident n
1083 rparent )
1084 semicolon ;
1085 rcbrack }
1086 ifsy if
1087 lparent (
1088 ident n
1089 geq >=
1090 intcon 0
1091 rparent )
1092 lcbrack {
1093 printfsy printf
1094 lparent (
1095 stringcon The fibonaci's answer is 
1096 comma ,
1097 ident fibonaci
1098 lparent (
1099 ident n
1100 rparent )
1101 rparent )
1102 semicolon ;
1103 rcbrack }
1104 rcbrack }
1105 whilesy while
1106 lparent (
1107 ident n
1108 lss <
1109 intcon 0
1110 rparent )
1111 rcbrack }
1112 intsy int
1113 ident mod
1114 lparent (
1115 intsy int
1116 ident n
1117 comma ,
1118 intsy int
1119 ident m
1120 rparent )
1121 lcbrack {
1122 returnsy return
1123 lparent (
1124 ident n
1125 minus -
1126 ident n
1127 rdiv /
1128 ident m
1129 mult *
1130 ident m
1131 rparent )
1132 semicolon ;
1133 rcbrack }
1134 intsy int
1135 ident gcd
1136 lparent (
1137 intsy int
1138 ident n
1139 comma ,
1140 intsy int
1141 ident m
1142 rparent )
1143 lcbrack {
1144 intsy int
1145 ident rem
1146 semicolon ;
1147 ident rem
1148 assign  
1149 intcon 0
1150 semicolon ;
1151 ifsy if
1152 lparent (
1153 ident n
1154 eql ==
1155 intcon 0
1156 rparent )
1157 returnsy return
1158 lparent (
1159 ident m
1160 rparent )
1161 semicolon ;
1162 ifsy if
1163 lparent (
1164 ident m
1165 eql ==
1166 intcon 0
1167 rparent )
1168 returnsy return
1169 lparent (
1170 ident n
1171 rparent )
1172 semicolon ;
1173 returnsy return
1174 lparent (
1175 ident gcd
1176 lparent (
1177 ident m
1178 comma ,
1179 ident mod
1180 lparent (
1181 ident n
1182 comma ,
1183 ident m
1184 rparent )
1185 rparent )
1186 rparent )
1187 semicolon ;
1188 rcbrack }
1189 intsy int
1190 ident iswronggcd
1191 lparent (
1192 intsy int
1193 ident n
1194 comma ,
1195 intsy int
1196 ident m
1197 rparent )
1198 lcbrack {
1199 ifsy if
1200 lparent (
1201 ident n
1202 leq <=
1203 intcon 0
1204 rparent )
1205 returnsy return
1206 lparent (
1207 intcon 1
1208 rparent )
1209 semicolon ;
1210 ifsy if
1211 lparent (
1212 ident m
1213 leq <=
1214 intcon 0
1215 rparent )
1216 returnsy return
1217 lparent (
1218 intcon 1
1219 rparent )
1220 semicolon ;
1221 returnsy return
1222 lparent (
1223 intcon 0
1224 rparent )
1225 semicolon ;
1226 rcbrack }
1227 voidsy void
1228 ident gcd_test
1229 lparent (
1230 rparent )
1231 lcbrack {
1232 intsy int
1233 ident n
1234 comma ,
1235 ident m
1236 semicolon ;
1237 printfsy printf
1238 lparent (
1239 stringcon GCD: Please input two unsigned positive integer ?
1240 rparent )
1241 semicolon ;
1242 scanfsy scanf
1243 lparent (
1244 ident n
1245 comma ,
1246 ident m
1247 rparent )
1248 semicolon ;
1249 ifsy if
1250 lparent (
1251 ident iswronggcd
1252 lparent (
1253 ident n
1254 comma ,
1255 ident m
1256 rparent )
1257 rparent )
1258 lcbrack {
1259 dosy do
1260 lcbrack {
1261 printfsy printf
1262 lparent (
1263 stringcon Input error, try Again: 
1264 rparent )
1265 semicolon ;
1266 scanfsy scanf
1267 lparent (
1268 ident n
1269 comma ,
1270 ident m
1271 rparent )
1272 semicolon ;
1273 rcbrack }
1274 whilesy while
1275 lparent (
1276 ident iswronggcd
1277 lparent (
1278 ident n
1279 comma ,
1280 ident m
1281 rparent )
1282 rparent )
1283 semicolon ;
1284 rcbrack }
1285 printfsy printf
1286 lparent (
1287 stringcon The gcd's answer is 
1288 comma ,
1289 ident gcd
1290 lparent (
1291 ident n
1292 comma ,
1293 ident m
1294 rparent )
1295 rparent )
1296 semicolon ;
1297 rcbrack }
1298 intsy int
1299 ident is_prime
1300 lparent (
1301 intsy int
1302 ident x
1303 rparent )
1304 lcbrack {
1305 intsy int
1306 ident i
1307 semicolon ;
1308 ident i
1309 assign  
1310 intcon 2
1311 semicolon ;
1312 ifsy if
1313 lparent (
1314 ident x
1315 eql ==
1316 intcon 2
1317 rparent )
1318 returnsy return
1319 lparent (
1320 intcon 1
1321 rparent )
1322 semicolon ;
1323 dosy do
1324 lcbrack {
1325 ifsy if
1326 lparent (
1327 ident mod
1328 lparent (
1329 ident x
1330 comma ,
1331 ident i
1332 rparent )
1333 eql ==
1334 intcon 0
1335 rparent )
1336 returnsy return
1337 lparent (
1338 intcon 0
1339 rparent )
1340 semicolon ;
1341 ident i
1342 assign  
1343 ident i
1344 plus +
1345 intcon 1
1346 semicolon ;
1347 rcbrack }
1348 whilesy while
1349 lparent (
1350 ident i
1351 mult *
1352 ident i
1353 lss <
1354 ident x
1355 rparent )
1356 semicolon ;
1357 returnsy return
1358 lparent (
1359 intcon 1
1360 rparent )
1361 semicolon ;
1362 rcbrack }
1363 voidsy void
1364 ident prime_factorization
1365 lparent (
1366 intsy int
1367 ident n
1368 rparent )
1369 lcbrack {
1370 intsy int
1371 ident i
1372 comma ,
1373 ident first
1374 semicolon ;
1375 ident i
1376 assign  
1377 intcon 2
1378 semicolon ;
1379 ident first
1380 assign  
1381 intcon 0
1382 semicolon ;
1383 ifsy if
1384 lparent (
1385 ident n
1386 eql ==
1387 intcon 1
1388 rparent )
1389 lcbrack {
1390 printfsy printf
1391 lparent (
1392 stringcon 1
1393 rparent )
1394 semicolon ;
1395 returnsy return
1396 semicolon ;
1397 rcbrack }
1398 dosy do
1399 lcbrack {
1400 ifsy if
1401 lparent (
1402 ident is_prime
1403 lparent (
1404 ident i
1405 rparent )
1406 eql ==
1407 intcon 1
1408 rparent )
1409 lcbrack {
1410 ifsy if
1411 lparent (
1412 ident mod
1413 lparent (
1414 ident n
1415 comma ,
1416 ident i
1417 rparent )
1418 eql ==
1419 intcon 0
1420 rparent )
1421 lcbrack {
1422 dosy do
1423 lcbrack {
1424 ident n
1425 assign  
1426 ident n
1427 rdiv /
1428 ident i
1429 semicolon ;
1430 ifsy if
1431 lparent (
1432 ident first
1433 eql ==
1434 intcon 1
1435 rparent )
1436 printfsy printf
1437 lparent (
1438 stringcon *
1439 rparent )
1440 semicolon ;
1441 ident first
1442 assign  
1443 intcon 1
1444 semicolon ;
1445 printfsy printf
1446 lparent (
1447 ident i
1448 rparent )
1449 semicolon ;
1450 rcbrack }
1451 whilesy while
1452 lparent (
1453 ident mod
1454 lparent (
1455 ident n
1456 comma ,
1457 ident i
1458 rparent )
1459 eql ==
1460 intcon 0
1461 rparent )
1462 semicolon ;
1463 rcbrack }
1464 rcbrack }
1465 ident i
1466 assign  
1467 ident i
1468 plus +
1469 intcon 1
1470 semicolon ;
1471 rcbrack }
1472 whilesy while
1473 lparent (
1474 ident i
1475 mult *
1476 ident i
1477 lss <
1478 ident n
1479 rparent )
1480 ifsy if
1481 lparent (
1482 ident n
1483 neq !=
1484 intcon 1
1485 rparent )
1486 lcbrack {
1487 ifsy if
1488 lparent (
1489 ident first
1490 eql ==
1491 intcon 1
1492 rparent )
1493 printfsy printf
1494 lparent (
1495 stringcon *
1496 rparent )
1497 semicolon ;
1498 printfsy printf
1499 lparent (
1500 ident n
1501 rparent )
1502 semicolon ;
1503 rcbrack }
1504 rcbrack }
1505 voidsy void
1506 ident prime_factorization_test
1507 lparent (
1508 rparent )
1509 lcbrack {
1510 intsy int
1511 ident n
1512 semicolon ;
1513 printfsy printf
1514 lparent (
1515 stringcon prime_factorization: Please input a unsigned positive integer(<2^31-1) ?
1516 rparent )
1517 semicolon ;
1518 scanfsy scanf
1519 lparent (
1520 ident n
1521 rparent )
1522 semicolon ;
1523 dosy do
1524 lcbrack {
1525 ifsy if
1526 lparent (
1527 ident n
1528 lss <
1529 intcon 0
1530 rparent )
1531 lcbrack {
1532 printfsy printf
1533 lparent (
1534 stringcon Input error, try again:
1535 rparent )
1536 semicolon ;
1537 scanfsy scanf
1538 lparent (
1539 ident n
1540 rparent )
1541 semicolon ;
1542 rcbrack }
1543 rcbrack }
1544 whilesy while
1545 lparent (
1546 ident n
1547 lss <
1548 intcon 0
1549 rparent )
1550 printfsy printf
1551 lparent (
1552 stringcon The factor of n is 
1553 rparent )
1554 semicolon ;
1555 ident prime_factorization
1556 lparent (
1557 ident n
1558 rparent )
1559 semicolon ;
1560 rcbrack }
1561 intsy int
1562 ident iswrong
1563 lparent (
1564 charsy char
1565 ident a
1566 rparent )
1567 lcbrack {
1568 ifsy if
1569 lparent (
1570 charcon E
1571 eql ==
1572 ident a
1573 rparent )
1574 returnsy return
1575 lparent (
1576 intcon 0
1577 rparent )
1578 semicolon ;
1579 ifsy if
1580 lparent (
1581 charcon M
1582 eql ==
1583 ident a
1584 rparent )
1585 returnsy return
1586 lparent (
1587 intcon 0
1588 rparent )
1589 semicolon ;
1590 ifsy if
1591 lparent (
1592 charcon H
1593 eql ==
1594 ident a
1595 rparent )
1596 returnsy return
1597 lparent (
1598 intcon 0
1599 rparent )
1600 semicolon ;
1601 returnsy return
1602 lparent (
1603 intcon 1
1604 rparent )
1605 semicolon ;
1606 rcbrack }
1607 voidsy void
1608 mainsy main
1609 lparent (
1610 rparent )
1611 lcbrack {
1612 charsy char
1613 ident kind
1614 semicolon ;
1615 printfsy printf
1616 lparent (
1617 stringcon Please input Test Type:E(Easy), (M)Middle, H(Hard): 
1618 rparent )
1619 semicolon ;
1620 scanfsy scanf
1621 lparent (
1622 ident kind
1623 rparent )
1624 semicolon ;
1625 ifsy if
1626 lparent (
1627 ident iswrong
1628 lparent (
1629 ident kind
1630 rparent )
1631 rparent )
1632 lcbrack {
1633 dosy do
1634 lcbrack {
1635 printfsy printf
1636 lparent (
1637 stringcon Try Again: 
1638 rparent )
1639 semicolon ;
1640 scanfsy scanf
1641 lparent (
1642 ident kind
1643 rparent )
1644 semicolon ;
1645 rcbrack }
1646 whilesy while
1647 lparent (
1648 ident iswrong
1649 lparent (
1650 ident kind
1651 rparent )
1652 rparent )
1653 rcbrack }
1654 switchsy switch
1655 lparent (
1656 ident kind
1657 rparent )
1658 lcbrack {
1659 casesy case
1660 charcon E
1661 colon :
1662 lcbrack {
1663 ident define_test
1664 lparent (
1665 rparent )
1666 semicolon ;
1667 ident operator_test
1668 lparent (
1669 rparent )
1670 semicolon ;
1671 ident fibonaci_test
1672 lparent (
1673 rparent )
1674 semicolon ;
1675 rcbrack }
1676 casesy case
1677 charcon M
1678 colon :
1679 lcbrack {
1680 ident dowhile_test
1681 lparent (
1682 rparent )
1683 semicolon ;
1684 ident condition_test
1685 lparent (
1686 rparent )
1687 semicolon ;
1688 ident string_test
1689 lparent (
1690 rparent )
1691 semicolon ;
1692 ident gcd_test
1693 lparent (
1694 rparent )
1695 semicolon ;
1696 rcbrack }
1697 casesy case
1698 charcon H
1699 colon :
1700 lcbrack {
1701 ident define_test
1702 lparent (
1703 rparent )
1704 semicolon ;
1705 ident operator_test
1706 lparent (
1707 rparent )
1708 semicolon ;
1709 ident dowhile_test
1710 lparent (
1711 rparent )
1712 semicolon ;
1713 ident condition_test
1714 lparent (
1715 rparent )
1716 semicolon ;
1717 ident string_test
1718 lparent (
1719 rparent )
1720 semicolon ;
1721 ident miscellaneous_test
1722 lparent (
1723 rparent )
1724 semicolon ;
1725 ident prime_factorization_test
1726 lparent (
1727 rparent )
1728 semicolon ;
1729 rcbrack }
1730 rcbrack }
1731 returnsy return
1732 semicolon ;
1733 rcbrack }
